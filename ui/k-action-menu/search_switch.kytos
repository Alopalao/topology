<template>
 <div id="k-switch-search">
  <div id="k-input-search" class="k-input-wrap">
   <input type="text" v-model="search" class="k-input" tooltip="Search for switches" placeholder="Search for switches" onshow="this.focus()" autofocus id="k-switches-search-input">
  </div>

  <div id="search-result">
    <div class="item-search" :title="s.dpid" v-for="s in switchesFiltered" @click="open_switch(s)">
          <div class="item-switch"><span>{{s.name}} </span><br />({{s.connection}})</div>
          <div class="item-content" v-if="s.custom_properties && s.custom_properties.description"><b>Description:</b> {{s.custom_properties.description}}</div>
          <div class="item-content" v-if="s.custom_properties && s.custom_properties.city"><b>City:</b> {{s.custom_properties.city}}</div>
          <div class="item-content" v-if="s.custom_properties && s.custom_properties.network"><b>Network:</b> {{s.custom_properties.network}}</div>
          <div class="item-content"><b>Interfaces:</b> {{s.interfaces | length}}</div>
    </div>
  </div>
 </div>
</template>

<script>

module.exports = {
  name: 'kytos-topology-search_switch',
  methods:{
    show() {
       var content = {
                      "component": 'kytos-topology-search_switch',
                      "content": {},
                      "icon": "search",
                      "title": "Switch Search",
                      "subtitle": "by kytos/topology"
                     }
       this.$kytos.$emit("showInfoPanel", content)
    },
    open_switch(s){
      var content = {"component": 'kytos-topology-switch_info',
                     "content": s,
                     "icon": "gear",
                     "title": "Switch Details",
                     "subtitle": s.connection}
      this.$kytos.$emit("showInfoPanel", content)
    },
    get_switches () {
      var endpoint = this.$kytos_server_api + "kytos/topology/v3/switches"
      var self = this
      window.d3.json(endpoint, function(error, result) {
        for (var key in result.switches) {
          self.switches.push(result.switches[key])
        }
      })
    },
  },
  data() {
    return {
        search: '',
        switches: [],
        action: {
         name: 'Search Switch',
         author: 'kytos/topology',
         shortkey: 'ctrl+alt+s',
         action: this.show
        }
    }
  },
  filters: {
    length(items) {
     return Object.keys(items).length
    }
  },
  mounted() {
    this.get_switches()
    this.$kytos.$emit('addActionMenuItem', this.action)
  },
  computed: {
    switchesFiltered() {
      self = this
      return this.switches.filter(function(item) {
        var search = self.search.toLowerCase()
        var description = ''
        var city = ''
        var network = ''
        if(item.custom_properties){
          if (item.custom_properties['description'])
            description = item.custom_properties['description'].toLowerCase()
          if (item.custom_properties['city'])
            city = item.custom_properties['city'].toLowerCase()
          if (item.custom_properties['network'])
            network = item.custom_properties['network'].toLowerCase()
        }
        return (item.name.toLowerCase().indexOf(search)>=0 ||
                item.connection.toLowerCase().indexOf(search)>=0 ||
                description.indexOf(search)>=0 ||
                city.indexOf(search)>=0 ||
                network.indexOf(search)>=0)
      })
    }
  },
}
</script>

<style>
#search-result {
 -webkit-flex: 1 1 auto;
 overflow: auto;
 height: 85vh;
}
#k-switch-search {
 color: #CCC;
 font-size: 0.9em;
 line-height: 1.2em;
}
#k-input-search {
 margin-bottom: 10px;
 width: 96%;
 font-size: 1.2em;
}

#k-input-search:hover *,
#k-input-search:hover {
 background: #111;
}

.item-search {
 clear: both;
 border-top: 1px solid #444;
 padding: 5px;
 margin-right: 10px;
 cursor: pointer;
}
.item-search:hover * {
 background: #111;
 color: #008690;
}
.item-content:hover {
 background: #111;
 color: #008690;
}

.item-switch span {
 font-weight: bold;
}
.item-content {
 color: #BBB;
 font-size: 0.9em;
}
</style>

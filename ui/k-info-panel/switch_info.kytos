<template>
    <k-accordion>
      <k-button :on_click="bt_state_toggle" :title="next_state"></k-button>
      <k-accordion-item title="Usage Radar" v-if="this.metadata.id">
      <k-switch-radar :dpid="metadata.id" :showGrid="true" :showAxis="true" :showLabels="true" :showLegend="false"></k-switch-radar>
      </k-accordion-item>
      <k-accordion-item title="Basic Details">
          <k-property-panel>
              <k-property-panel-item :name="key" :value="value" :key="key" v-if="content" v-for="(value, key) in this.metadata"></k-property-panel-item>
          </k-property-panel>
      </k-accordion-item>
      <k-accordion-item title="Custom Properties" v-if="this.custom_properties">
          <k-property-panel>
              <k-property-panel-item :name="key" :value="value" v-if="content" :key="key" v-for="(value, key) in this.custom_properties"></k-property-panel-item>
          </k-property-panel>
      </k-accordion-item>
      <k-accordion-item title="Interfaces" v-if="this.interfaces">
         <k-interface :interface_id="interface.id" :name="interface.name" :port_number="interface.port_number" :mac="interface.mac" :speed="interface.speed" :key="interface.name" v-for="interface in this.interfaces"></k-interface>
      </k-accordion-item>
      <k-accordion-item title="Flows" v-if="this.flows">
         <k-flow :content="flow" :key="flow.id" v-for="flow in this.flows"></k-flow>
      </k-accordion-item>
    </k-accordion>
</template>

<script>
 module.exports = {
   props: ["content"],
   data () {
     return {
       next_state: '',
       display: false,
       metadata: {'id': '',
                  'name': '',
                  'dpid': '',
                  'connection': '',
                  'ofp_version': '',
                  'manufacturer': '',
                  'serial': '',
                  'hardware': '',
                  'software': '',},
       interfaces: [],
       custom_properties: {},
       flows: []
     }
   },
   methods: {
     update_switch_content () {
       if(this.content === undefined) return
       this.interfaces = this.content.interfaces
       this.custom_properties = this.content.custom_properties
       var self = this
       Object.keys(this.metadata).forEach(function (key) {
         let value = self.content[key]
         self.metadata[key] = String(value)
       });
       this.get_flows()
       this.get_enabled_value()
     },
     get_flows() {
       var dpid = this.metadata.dpid
       var endpoint = this.$kytos_server_api + "kytos/flow_manager/v2/flows/" + dpid
       var self = this
       window.d3.json(endpoint, function(error, result) {
         self.flows = result[dpid].flows
       })
     },
     get_enabled_value() {
       this.next_state = this.metadata.enabled == 'true'? 'Disable' : 'Enable'
     },
     msg_state_success(data){
       let notification = {
         title: 'Switch ' + this.next_state + 'd: Succeed',
         description: 'The switch ' + this.metadata.dpid + ' was ' + this.next_state.toLowerCase() + 'd.',
         icon: 'gear',
       }
       this.next_state = this.next_state == 'Enable'? 'Disable' : 'Enable'
       this.$kytos.$emit("setNotification", notification)
     },
     msg_state_failure(data){
       let notification = {
         title: 'Switch ' + this.next_state + 'd: Failed',
         description: data.status + ': ' + data.responseJSON.description + '. The switch ' + this.metadata.dpid + ' was not ' + this.next_state.toLowerCase() + 'd.',
         icon: 'gear',
       }
       this.$kytos.$emit("setNotification", notification)
     },
     bt_state_toggle(){
       let request = $.ajax({
                        type:"POST",
                        url: this.$kytos_server_api + "kytos/topology/v3/switches/" + this.metadata.dpid
                              + "/" + this.next_state.toLowerCase(),
                        async: true,});       
       request.done(this.msg_state_success)
       request.fail(this.msg_state_failure)                        
     },
   },
   mounted () {
     this.update_switch_content()
   },
   watch: {
     content () {
       if (this.content) {
         this.update_switch_content()
       }
     }
   }
 }
</script>
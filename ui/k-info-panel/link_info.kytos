<template>
    <k-accordion>
      <k-button :on_click="bt_state_toggle" :title="next_state"></k-button>
      <k-accordion-item title="Basic Details">
        <k-property-panel>
          <k-property-panel-item :name="key" :value="value" 
          :key="key" v-if="content" v-for="(value, key) in this.details">
          </k-property-panel-item>
        </k-property-panel>
      </k-accordion-item>
      <k-accordion-item title="Metadata" v-if="Object.keys(this.metadata).length > 0">
        <div class="metadata_table">
          <table>
            <thead>
              <tr>
                <th>Key</th>
                <th>Value</th>  
              </tr>
            </thead>
            <tbody>
              <tr v-for="(value, key) in this.metadata">
                <td >{{key}}</td>
                <td >{{value}}</td>
              </tr>
            </tbody>
          </table>
        </div>
      </k-accordion-item>
    </k-accordion>
</template>

<script>
 module.exports = {
   props: ["content"],
   methods: {
   },
   data () {
     return {
         metadata: [],
         next_state: '',
         details: {'enabled': '',
                   'active': '',
                   'id': '',
                   'endpoint_a': '',
                   'endpoint_b': '',},
     }
   },
   methods: {
     get_details: function(){
       if(this.content === undefined) return
       var self = this
       Object.keys(this.details).forEach(function (key) {
         let value = self.content[key]
         if (key != 'endpoint_a' && key != 'endpoint_b') {
             self.details[key] = String(value)
         }
         else {
             self.details[key] = String(value['id'])
         }
       });
       this.get_metadata()
       this.get_enabled_value()
     },
     get_metadata: function(){
       if(this.content === undefined) return
       this.metadata = this.content.metadata
     },
     get_enabled_value() {
       this.next_state = this.details.enabled == 'true'? 'Disable' : 'Enable'
     },
     msg_state_success(data){
       let name = this.metadata.link_name !== undefined && this.metadata.link_name.length !== 0? '"' + this.metadata.link_name + '"' : this.details.id
       let notification = {
         title: 'Link ' + this.next_state + 'd: Succeed',
         description: 'The link ' + name + ' was ' + this.next_state.toLowerCase() + 'd.',
         icon: 'gear',
       }
       this.next_state = this.next_state == 'Enable'? 'Disable' : 'Enable'
       this.content['enabled'] = this.next_state == 'Enable'? 'false' : 'true'
       this.details['enabled'] = this.content['enabled']
       this.$kytos.$emit("setNotification", notification)
     },
     msg_state_failure(data){
       let name = this.metadata.link_name !== undefined && this.metadata.link_name.length !== 0? '"' + this.metadata.link_name + '"' : this.details.id
       let notification = {
         title: 'Link ' + this.next_state + 'd: Failed',
         description: data.status + ': ' + data.responseJSON.description + ' The link ' + name + ' was not ' + this.next_state.toLowerCase() + 'd.',
         icon: 'gear',
       }
       this.$kytos.$emit("setNotification", notification)
     },
     bt_state_toggle(){
       let request = $.ajax({
                        type:"POST",
                        url: this.$kytos_server_api + "kytos/topology/v3/links/" + this.details.id
                              + "/" + this.next_state.toLowerCase(),
                        async: true,});       
       request.done(this.msg_state_success)
       request.fail(this.msg_state_failure)                        
     },
   },
   mounted () {
       this.get_details()
   },
   watch:{
       content(){
           if (this.content){
               this.get_details()
           }
       }
   }
 }
</script>

<style>
.metadata_table {
  color: #ccc;
  text-align: center;
  margin: 0 auto;
  display: block;
  padding: 0.5em 0 1em 0.3em;
  font-size: 0.9em;
  overflow-x: auto;
}
.metadata_table table{
  display: table;
  width: 100%;
}
.metadata_table thead{
  font-weight: bold;
  background: #554077;
}
.metadata_table th{
  padding: 0.6em 0 0.6em 0;
}
.metadata_table td{
  vertical-align: middle;
  padding: 0.6em 0 0.6em 0;
}
.metadata_table tbody tr:nth-child(even) {
  background: #313131;
}
.metadata_table tbody tr:hover {
    color: #eee;
    background-color: #666;
}
</style>